# -*- coding: utf-8 -*-
"""Sprint_III.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14UZkzhk67qUW2wqrPObLfMpqB53GSuaz
"""

!pip install pandasql
!pip install pmdarima

"""Importanto bibliotecas, realizando leitura do arquivo .csv e confirmando se de fato existem valores diferentes na coluna 'count'."""

import pandas as pd
import numpy as np
from pandas import DataFrame, Series
#!pip install pandasql
import pandasql
from sklearn.model_selection import train_test_split
# from statsmodels.tsa.statespace.sarimax import SARIMAX
import statsmodels.api as sm
import matplotlib.pyplot as plt
import statsmodels.api as sm
from pmdarima import auto_arima

df = pd.read_csv('resultado-busca-phoenix.csv')

df['_id'] = pd.to_datetime(df['_id'])


# separa os dados em conjunto de treino e teste
treinamento, teste = train_test_split(df['count'], test_size=.30, shuffle=False)

# depois que vários modelos são criados, o melhor é selecionado
# execute esta parte do código separadamente, pois ela leva mais tempo
auto_arima_model = auto_arima(treinamento, d=1, D=1, seasonal=True, trace=True, stepwise=False, max_p=8, max_q=8, max_d=8, max_P=8, max_Q=8, max_D=8, start_p=0, start_q=0, start_d=0, start_P=0, start_Q=0, start_D=0)
print(auto_arima_model)

# o modelo superior é então aplicado ao sarimax
modelo_superior = sm.tsa.SARIMAX(treinamento, order=auto_arima_model.order).fit()

# qualidade do modelo ajustado com AIC:
print("Qualidade AIC: ", modelo_superior.aic)

# forecast

forecast = modelo_superior.forecast(steps=len(teste))
print('Forecast: \n', forecast)

teste.plot(label = 'teste')
forecast.plot(label = 'forecast')

plt.legend()
plt.show()

from sklearn.metrics import mean_absolute_error as mae

# Calculando 'mean_absolute_error' com sklearn
print('Erro médio absoluto: ', mae(teste, forecast))

# Printando desvio padrão
print('Desvio padrão: ', np.std(forecast))